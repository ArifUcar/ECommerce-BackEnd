@page "/products"
@using E_Commerce.Models
@using E_Commerce.Services.Interfaces
@using Microsoft.JSInterop
@inject IProductService ProductService
@inject IJSRuntime JSRuntime

<h3>Ürünler</h3>

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Yükleniyor...</span>
        </div>
    </div>
}
else if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@product.ProductName</h5>
                        <p class="card-text">@product.Description</p>
                        <p class="card-text">
                            <small class="text-muted">Kategori: @product.CategoryName</small>
                        </p>
                        <p class="card-text">
                            <strong>Fiyat: @product.Price.ToString("C2")</strong>
                        </p>
                        <p class="card-text">
                            <small class="text-muted">Stok: @product.StockQuantity</small>
                        </p>
                        <div class="btn-group">
                            <button class="btn btn-primary" @onclick="() => EditProduct(product)">
                                Düzenle
                            </button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">
                                Sil
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <button class="btn btn-success mt-3" @onclick="ShowCreateModal">
        Yeni Ürün Ekle
    </button>
}

@code {
    private List<Product> products = new();
    private bool loading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            products = await ProductService.GetAllProductsAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private void ShowCreateModal()
    {
        // TODO: Yeni ürün ekleme modalını göster
    }

    private void EditProduct(Product product)
    {
        // TODO: Ürün düzenleme modalını göster
    }

    private async Task DeleteProduct(Guid id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", new[] { "Bu ürünü silmek istediğinizden emin misiniz?" }))
            return;

        try
        {
            await ProductService.DeleteProductAsync(id);
            products.RemoveAll(p => p.Id == id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
} 